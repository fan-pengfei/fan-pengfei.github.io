{"meta":{"title":"樊鹏飞的博客","subtitle":"记录生活中的点点滴滴","description":"怕什么真理无穷，进一寸有一寸的欢喜","author":"樊鹏飞","url":"https://fan-pengfei.top","root":"/"},"pages":[{"title":"Gitment","date":"2021-08-18T08:31:39.000Z","updated":"2021-08-18T08:31:39.859Z","comments":true,"path":"Gitment/index.html","permalink":"https://fan-pengfei.top/Gitment/index.html","excerpt":"","text":""},{"title":"books","date":"2021-08-17T09:02:40.000Z","updated":"2021-08-17T09:02:40.628Z","comments":true,"path":"books/index.html","permalink":"https://fan-pengfei.top/books/index.html","excerpt":"","text":""},{"title":"tags","date":"2021-08-16T16:29:10.000Z","updated":"2021-08-17T02:35:15.280Z","comments":true,"path":"tags/index.html","permalink":"https://fan-pengfei.top/tags/index.html","excerpt":"","text":"hkjnmjjk jkgklllllllllllllllllllnm,mnnmnbjjkbnbnjkbnjknjk"},{"title":"分类","date":"2021-08-17T02:59:57.000Z","updated":"2021-08-17T03:17:18.158Z","comments":true,"path":"categories/index.html","permalink":"https://fan-pengfei.top/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"学习Git","slug":"学习Git","date":"2021-08-18T04:29:14.000Z","updated":"2021-08-18T05:21:58.039Z","comments":true,"path":"2021/08/18/学习Git/","link":"","permalink":"https://fan-pengfei.top/2021/08/18/%E5%AD%A6%E4%B9%A0Git/","excerpt":"Git相关的知识；","text":"Git相关的知识； 参考链接：https://zhuanlan.zhihu.com/p/94008510 Git 常用命令 初次使用时，在命令行中配置本地仓库的账号和邮箱： 12$ git config --global user.name &quot;username&quot; $ git config --global user.email &quot;useremail&quot; 初始化Git,使用 cd 命令导航到要在终端中设置版本控制的目录，现在你可以像这样初始化 Git 存储库： 1git init 要开始对现有文件进行版本控制，你应该先跟踪这些文件并进行初始提交。要做到这一点，你首先需要将文件添加到 Git 中，并将它们附加到 Git 项目中。 12git add &lt;file&gt;git commit -m &#x27;first commit&#x27; 还有一些更高级的方法可以将文件添加到 Git 中，从而使你的工作流程更高效。我们可以执行以下操作，而不是试图查找所有有更改的文件并逐个添加它们： 12345678# 逐个添加文件git add filename# 添加当前目录中的所有文件git add -A# 添加当前目录中的所有文件更改git add .# 选择要添加的更改（你可以 Y 或 N 完成所有更改）git add -p 远程备份文件（Github）,因此，首先转到 http://github.com 并创建一个存储库。然后，使用存储库的链接将其添加为本地 git 项目的来源，即该代码的存储位置； 12git remote add origin \\https://github.com/fan-pengfei/bash_learning.git 远程备份代码： 1git push origin master git status 命令用于确定哪些文件处于哪种状态，它使你可以查看哪些文件已提交，哪些文件尚未提交。如果在所有文件都已提交并推送后运行此命令，则应该看到类似以下内容： 123$ git status# On branch masternothing to commit (working directory clean) 我们可以使用 git commit -m &#39;提交信息&#39; 来将文件提交到 Git。对于提交简短消息来说，这一切都很好，但是如果你想做一些更精细的事情，你需要来学习更多的操作: 123456789101112131415161718### 提交暂存文件，通常用于较短的提交消息git commit -m &#x27;commit message&#x27;### 添加文件并提交一次git commit filename -m &#x27;commit message&#x27;### 添加文件并提交暂存文件git commit -am &#x27;insert commit message&#x27;### 更改你的最新提交消息git commit --amend &#x27;new commit message&#x27; # 将一系列提交合并为一个提交，你可能会用它来组织混乱的提交历史记录git rebase -i### 这将为你提供核心编辑器上的界面：# Commands:# p, pick = use commit# r, reword = use commit, but edit the commit message# e, edit = use commit, but stop for amending# s, squash = use commit, but meld into previous commit# f, fixup = like &quot;squash&quot;, but discard this commit&#x27;s log message# x, exec = run command (the rest of the line) using shell GitHub存储库的master分支应始终包含有效且稳定的代码。但是，你可能还希望备份一些当前正在处理的代码，但这些代码并不完全稳定。也许你要添加一个新功能，你正在尝试和破坏很多代码，但是你仍然希望保留备份以保存进度！ 分支使你可以在不影响master分支的情况下处理代码的单独副本。首次创建分支时，将以新名称创建master分支的完整克隆。然后，你可以独立地在此新分支中修改代码，包括提交文件等。一旦你的新功能已完全集成并且代码稳定，就可以将其合并到master分支中！ 1234567891011121314151617181920212223242526### 创建一个本地分支git checkout -b branchname### 在2个分支之间切换git checkout prc/dev-wupxgit checkout master### 将新的本地分支作为备份git push -u origin branch_2### 删除本地分支，这不会让你删除尚未合并的分支git branch -d branch_2### 删除本地分支，即使尚未合并，这也会删除该分支！git branch -D branch_2### Viewing all current branches for the repository, including both ### local and remote branches. Great to see if you already have a ### branch for a particular feature addition, especially on bigger ### projects### 查看存储库的所有当前分支，包括本地和远程分支。git branch -a### 查看已合并到您当前分支中的所有分支，包括本地和远程。 非常适合查看所有代码的来源！git branch -a --merged### 查看尚未合并到当前分支中的所有分支，包括本地和远程git branch -a --no-merged### 查看所有本地分支git branch### 查看所有远程分支git branch -r# 将主分支重新设置为本地分支$ git rebase origin/master# 将分支推送到远程存储库源并对其进行跟踪$ git push origin branchname 将新功能添加到分支中之后，你需要将其合并回master分支，以便您的master具有所有最新的代码功能。 方法如下： 1234### 首先确保你正在查看 master 分支git checkout master### 现在将你的分支合并到 master git merge prc/dev-wupx 你可能必须修复分支与主服务器之间的任何代码冲突，但是 Git 将向你展示在键入该 merge 命令后如何执行所有这些操作。 当有错误发生时，Git 提供了你所需的一切，以防你在所推送的代码中犯错，改写某些内容或者只是想对所推送的内容进行更正。 12345678910111213141516### 切换到最新提交的代码版本git reset HEAD git reset HEAD -- filename # for a specific file### 切换到最新提交之前的代码版本git reset HEAD^ -- filenamegit reset HEAD^ -- filename # for a specific file### 切换回3或5次提交git reset HEAD~3 -- filenamegit reset HEAD~3 -- filename # for a specific filegit reset HEAD~5 -- filenamegit reset HEAD~5 -- filename # for a specific file### 切换回特定的提交，其中 0766c053 为提交 IDgit reset 0766c053 -- filenamegit reset 0766c053 -- filename # for a specific file### 先前的命令是所谓的软重置。 你的代码已重置，但是git仍会保留其他代码的副本，以备你需要时使用。 另一方面，--hard 标志告诉Git覆盖工作目录中的所有更改。git reset --hard 0766c053 有用的技巧搜索12345678910### 搜索目录中的字符串部分git grep &#x27;project&#x27;### 在目录中搜索部分字符串，-n 打印出 git 找到匹配项的行号git grep -n &#x27;project&#x27;### git grep -C &lt;行数&gt; &#x27;something&#x27; 搜索带有某些上下文的字符串部分（某些行在我们正在寻找的字符串之前和之后）git grep -C&lt;number of lines&gt; &#x27;project&#x27;### 搜索字符串的一部分，并在字符串之前显示行git grep -B&lt;number of lines&gt; &#x27;project&#x27;### 搜索字符串的一部分，并在字符串之后显示行git grep -A&lt;number of lines&gt; &#x27;something&#x27; 看谁写了什么1234### 显示带有作者姓名的文件的更改历史记录git blame &#x27;filename&#x27;### 显示带有作者姓名和 git commit ID 的文件的更改历史记录git blame &#x27;filename&#x27; -l 日志1234567891011121314### 显示存储库中所有提交的列表 该命令显示有关提交的所有信息，例如提交ID，作者，日期和提交消息git log### 提交列表仅显示提交消息和更改git log -p### 包含您要查找的特定字符串的提交列表git log -S &#x27;project&#x27;### 作者提交的清单git log --author &#x27;wupx&#x27;### 显示存储库中提交列表的摘要。显示提交ID和提交消息的较短版本。git log --oneline### 显示昨天以来仓库中的提交列表git log --since=yesterday### 显示作者日志，并在提交消息中搜索特定术语git log --grep &quot;project&quot; --author &quot;wupx&quot; 每次提交不用重复输入账号和密码 参考链接：https://zhuanlan.zhihu.com/p/81334170 1、验证是否真的使用的是https方式 使用命令： 1git remote -v 确定是https方式； 2、修改https的方式为ssh方式 移除当前关联的远程仓库 1git remote rm origin 添加新的ssh地址 1git remote add origin ssh地址 3、再次提交 1git push origin master 这次没有再提示输入密码 报错解决办法 当出错：! [rejected] master -&gt; master (fetch first) error: failed to push some refs to ‘ 。。。’ 出现这个问题是因为github中的README.md文件不在本地代码目录中，可以通过如下命令进行代码合并 1git pull --rebase origin master","categories":[{"name":"Git","slug":"Git","permalink":"https://fan-pengfei.top/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://fan-pengfei.top/tags/Git/"}]},{"title":"typora图片上传出错","slug":"typora-picgo","date":"2021-08-17T13:00:31.000Z","updated":"2021-08-17T13:07:04.687Z","comments":true,"path":"2021/08/17/typora-picgo/","link":"","permalink":"https://fan-pengfei.top/2021/08/17/typora-picgo/","excerpt":"图片上传出错问题解决办法： 1、名字重复","text":"图片上传出错问题解决办法： 1、名字重复 2、服务器端口出错 3、图床owner\\repo填写出错","categories":[{"name":"md语法","slug":"md语法","permalink":"https://fan-pengfei.top/categories/md%E8%AF%AD%E6%B3%95/"}],"tags":[{"name":"md语法","slug":"md语法","permalink":"https://fan-pengfei.top/tags/md%E8%AF%AD%E6%B3%95/"},{"name":"图床","slug":"图床","permalink":"https://fan-pengfei.top/tags/%E5%9B%BE%E5%BA%8A/"}]},{"title":"Windows10 Bat脚本","slug":"windows-bat","date":"2021-08-17T12:41:10.000Z","updated":"2021-08-17T13:09:28.333Z","comments":true,"path":"2021/08/17/windows-bat/","link":"","permalink":"https://fan-pengfei.top/2021/08/17/windows-bat/","excerpt":"Windows bat脚本： 依次执行多条命令，并且执行完执行完毕并不退出：","text":"Windows bat脚本： 依次执行多条命令，并且执行完执行完毕并不退出： 12345/*upload.bat:博客自动上传脚本*/call hexo clean //call hexo g //博客生成call hexo d //博客上传pause //页面暂停 同时执行多条命令，并且执行完执行完毕并不退出（以下例子仅仅说明语法，并不代表可用）： 12345/*upload.bat:博客自动上传脚本*/start hexo clean //start hexo g //博客生成start hexo d //博客上传pause //页面暂停 脚本运行结果：","categories":[{"name":"Windows","slug":"Windows","permalink":"https://fan-pengfei.top/categories/Windows/"}],"tags":[{"name":"Windows","slug":"Windows","permalink":"https://fan-pengfei.top/tags/Windows/"}]},{"title":"Hexo+Yilia搭建自己的博客","slug":"hexo-creat","date":"2021-08-17T07:19:40.000Z","updated":"2021-08-17T12:30:40.103Z","comments":true,"path":"2021/08/17/hexo-creat/","link":"","permalink":"https://fan-pengfei.top/2021/08/17/hexo-creat/","excerpt":"缘起 一直想着要搭建一个属于自己的博客，感觉这样子很酷很酷，也是正好记录一下自己学习中遇到的问题，就当做一个笔记本来用吧！","text":"缘起 一直想着要搭建一个属于自己的博客，感觉这样子很酷很酷，也是正好记录一下自己学习中遇到的问题，就当做一个笔记本来用吧！ 原先想着用树莓派做服务器就可以搭建自己的的个人网站用来写博客，先在阿里云上购买了域名，其实最后是买了两个： 12fan-pengfei.topfan-pengfei.xyz 为啥买了两个呢？ 波折 其实是我自己太粗心大意了，在二月份的时候自己就买了.xyz这一个域名，后来忙其他的事就把这件事搁置了；注册新域名的时候发现这个已经被注册了（没想到是自己之前注册的），所以没办法，只能感慨与自己同名同姓的人真多，然后就注册了.top域名; 注册完才发现，自己的域名控制台上竟然有两个域名，这才让我想起尘封已久的记忆，不过头一个快过期了，就用第二个搭建了这个个人网站； https://fan-pengfei.top 前两天闲来无事，就又想折腾一下搭建自己博客的事；找了很多资料，终于还是将这个博客搭建起来了，挺简约的，自己很喜欢，毕竟博客就是用来记录自己学习到的知识，所以博客的内容应该更加重要。 步骤一、配置Github首先注册、登录： https://github.com/ 记住自己的Username（很重要）； 然后右上角选择 Create a new repository； Repository name -&gt;填自己的名字, yourname.github.io-&gt;这个就是你博客的域名了(yourname与你的注册用户名一致)； 例如，我的域名是github.com/fan-pengfei，就填入fan-pengfei.github.io； 二、配置环境安装 Node.js： https://nodejs.org/en/ 安装 Git： https://github.com/waylau/git-for-win 安装完成后，在开始菜单里找到Git-&gt;Git Bash，打开，并依次执行以下命令： 12git config --global user.name &quot;username&quot;git config --global user.email &quot;useremail&quot; 其中名称和邮箱都是Github注册时自己的名字和邮箱； 安装 Hexo，所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo: 1npm install -g hexo-cli 至此环境安装完毕（推荐使用cmder，超级好用的）; 三、电脑设置在电脑E盘（自己随意）目录下新建文件夹my_blog，进入my_blog，按住Shift键点击鼠标右键，选择Cmder Here；因为我有安装Cmder，没有安装的点击“在此处打开命令窗口”，输入： 1hexo init blog 稍微等待下，速度有点慢，成功后将提示： 1INFO Start blogging with Hexo! 重新打开CMD，输入： 1ssh-keygen -t rsa -C &quot;Github的注册邮箱地址&quot; 一路Enter过来就好，得到信息： 1Your public key has been saved in /c/Users/user/.ssh/id_rsa.pub. 找到该文件，打开（sublime text），Ctrl + a复制里面的所有内容，然后进入Sign in to GitHub：https://github.com/settings/ssh New SSH key -&gt;Title，blog -&gt;Key：输入刚才复制的—— Add SSH key； 四、配置博客在blog目录下，用Notepad++或者电脑自带的记事本打开_config.yml文件（我的路径是E:\\my_blog\\blog），修改参数信息； 特别注意的是，在每个参数之后的：之后都要加上一个空格，否则一定会报错； 修改网站相关信息： 123456title: 小飞的博客subtitle: 副标题description: 网页描述author: 小飞language: zh-CNtimezone: Asia/Changsha 配置部署（我的是fan-pengfei，修改成自己的）： 1234deploy: type: git repo: https://github.com/fan-pengfei/fan-pengfei.github.io.git branch: main 五、发表文章在命令行窗口中输入： 12hexo new &quot;测试文章&quot;INFO Created: E:\\my_blog\\blog\\source\\_posts\\测试文章.md 找到该文章，打开，使用Markdown语法编辑即可； 保存，然后执行下列步骤： 1234567891011E:\\my_blog\\blog$ hexo cleanINFO Deleted database.INFO Deleted public folder.E:\\my_blog\\blog$ hexo generateINFO Start processingINFO Files loaded in 1.48 s#省略INFO 29 files generated in 4.27 s 最后一步，发布到网上，执行： 123456F:\\test\\blog$ hexo deployINFO Deploying: gitINFO Clearing .deploy_git folder...INFO Copying files from public folder...#省略 其中会跳出Github登录，直接登录即可； 六、总结发布文章的步骤： 1、hexo new 创建文章； 2、Markdown语法编辑文章； 3、部署（所有打开CMD都是在blog目录下）； 1234hexo clean #清除缓存 网页正常情况下可以忽略此条命令hexo generate #生成hexo server #启动服务预览，非必要，可本地浏览网页hexo deploy #部署发布 常用命令简写Tips： hexo n “我的博客” == hexo new “我的博客” #新建文章hexo g == hexo generate#生成hexo s == hexo server #启动服务预览hexo d == hexo deploy#部署 如果在执行 hexo deploy 后,出现error deployer not found:github的错误，执行： 1npm install hexo-deployer-git --save 七、其他 若想让让博客更美观，可以更换其他主题，我使用的Yilia主题具体安装步骤请参考：https://github.com/litten/hexo-theme-yilia、 我的博客截图：","categories":[{"name":"DIY","slug":"DIY","permalink":"https://fan-pengfei.top/categories/DIY/"}],"tags":[{"name":"DIY","slug":"DIY","permalink":"https://fan-pengfei.top/tags/DIY/"},{"name":"兴趣","slug":"兴趣","permalink":"https://fan-pengfei.top/tags/%E5%85%B4%E8%B6%A3/"}]},{"title":"构建荔枝派zero完整系统以及运行QT程序","slug":"linux-licheepi-zero","date":"2021-08-17T07:19:26.000Z","updated":"2021-08-17T08:51:33.498Z","comments":true,"path":"2021/08/17/linux-licheepi-zero/","link":"","permalink":"https://fan-pengfei.top/2021/08/17/linux-licheepi-zero/","excerpt":"","text":"有空再写","categories":[{"name":"Linux","slug":"Linux","permalink":"https://fan-pengfei.top/categories/Linux/"}],"tags":[{"name":"兴趣","slug":"兴趣","permalink":"https://fan-pengfei.top/tags/%E5%85%B4%E8%B6%A3/"},{"name":"Linux","slug":"Linux","permalink":"https://fan-pengfei.top/tags/Linux/"}]},{"title":"First_blog","slug":"First_blog","date":"2021-08-16T04:56:20.000Z","updated":"2021-08-17T14:24:54.395Z","comments":true,"path":"2021/08/16/First_blog/","link":"","permalink":"https://fan-pengfei.top/2021/08/16/First_blog/","excerpt":"上大学后，第一次接触到单片机和电路设计，我便觉得这将是我一生所爱。","text":"上大学后，第一次接触到单片机和电路设计，我便觉得这将是我一生所爱。 从小学到初中，我一直都算是一个爱折腾的小孩子，对什么都特别的有兴趣，拆过很多东西，电器，玩具，不计其数。那时候，什么也不懂，就自己折腾着玩。 记得有一段时间，自己很想有一架自己的遥控飞机，刚开始就觉得有翅膀，有电机，就能飞起来，甚至还用塑料片子和泡沫做了一架原型，最后当然失败了，然后又自己用手机在网上搜索，才明白原来做一个遥控飞机是那么的复杂，要有舵机，起落架，能产生升力的机翼，还要有无刷电机，遥控装置，这些对于当时的我来说都是遥不可及的东西，最后这个做飞机的事情也不了了之了。 到了初三的时候，用仅有的钱在淘宝上买了无刷电机和电调，但是却无论如何无法让电机转起来，一直不知道是什么原因，后来就上网上找资料，最后发现是缺少一个控制的东西，然后就在淘宝买了一个舵机测试仪，最后终于转起来了，（直到不久前，我才明白舵机控制仪的原理，是通过旋钮，来控制输出一定占空比的脉冲，然后当做信号驱动电机或者舵机，用来控制电机转速，或者说舵机转动的角度，前几天我已经用单片机输出脉冲成功驱动我买到的舵机。）当时真的是激动极了，而且那无刷电机的转速超过我玩过的任何一个电机。当时拍的视频，现在还能找到。 后来有一段时间又迷上了土豆炮，是偶然间在网上看见的，然后就开始自己制作，原理很简单，就是在密闭容器内放入可燃气体，然后用电火花将气体点燃即可。燃料燃烧，气体膨胀，就会将填充的土豆发射出去，威力挺大。第一次做就做成功了，土豆炮弹的威力让我很是满意。后来改进了好多的版本，有迷你版本的，是用打火机做的，特别小巧，用花露水做为燃料，可以发射牙签或者火柴，也能飞个好几米。也有比较大的，可以发射干电池，用杀虫剂喷雾作为燃料，威力很大，近距离甚至可以打碎数厘米的瓦片，就是发射速度比较慢，因为燃料和炮弹都是手工装填，直到现在这个问题我也没有找到解决办法。 这些东西都很有意思，我在不懂任何电路知识的时候，甚至自己做过一个三极管自激电路，可以用来产生震荡，然后驱动变压器，或者一个超短距离的无线输电，当时根本不懂为什么，只是按照网上的接线方法，找一些相似的元件，然后连接起来就可以了，成功当然会让我很开心，失败也不会让我很沮丧，只是觉得好玩罢了。可能实践有助于知识的掌握理解，前些天我学习三极管的知识的时候，很快就能理解三极管的原理和应用。 在初中的时候，因为是留级生，学习压力很小很小，然后就开始做了很多的小手枪，有用橡皮筋作为动力的，有用弹簧作为动力的，甚至还有一个用磁铁作为动力的。当时我的想法真的是天马行空，好多好多奇奇怪怪的想法。因为有时候会拆很多东西，不懂的就查资料，也学得了很多奇奇怪怪的知识，比如饮水机里的制冷片，对的，饮水机制冷的原理跟冰箱完全不同，饮水机用的是半导体制冷片，只要通电，就能一面发热，一面制冷，特别神奇。而且可以根据温差发电，这些我都验证过，真的是太神奇了。还有什么焦耳小偷，ZVS电路，斯特林发动机等等，可能我后来对电子一类的感兴趣就跟这有很大的关系吧，因为这些东西真的有趣。 因为爱折腾，也做过好多傻事，比如我知道502的味道，有点甜，知道花露水的味道，很上头；在有一次做水火箭的时候，压力过大，然后瓶盖被崩出来，正对着我的脑门来了一下，肿了好几天。胳膊被烧过好几次，汗毛烧了又长，长了又烧，可能也习惯了，头发也被烧过两次，还好最后都长回来了。 上了大学，学了自动化这个专业，好像跟我的兴趣挺符合的，又入了单片机这个坑，感觉很棒，兴趣能成为工作当然是很棒的一件事。 这是我的第一篇文章，以后，我会写一些我学习的过程，以及学习中的一些问题和思考，会一直写的，因为一直在学习。","categories":[{"name":"感悟","slug":"感悟","permalink":"https://fan-pengfei.top/categories/%E6%84%9F%E6%82%9F/"}],"tags":[{"name":"感悟","slug":"感悟","permalink":"https://fan-pengfei.top/tags/%E6%84%9F%E6%82%9F/"},{"name":"兴趣","slug":"兴趣","permalink":"https://fan-pengfei.top/tags/%E5%85%B4%E8%B6%A3/"}]},{"title":"我的第一个作品——小一","slug":"2","date":"2020-08-16T12:15:20.000Z","updated":"2021-08-17T14:21:22.150Z","comments":true,"path":"2020/08/16/2/","link":"","permalink":"https://fan-pengfei.top/2020/08/16/2/","excerpt":"自从前几个月学了51单片机和stm32，我就一直想着做一个自己的作品，后来思来想去，就产生了做一个小型钟表的想法。","text":"自从前几个月学了51单片机和stm32，我就一直想着做一个自己的作品，后来思来想去，就产生了做一个小型钟表的想法。既然是自己的作品，那么从设计电路板，到焊接电子元件，再到程序的编写，再到最后的调试和Debug，都应该是自己独立完成。想法有了，然后就开始动手制作。 因为之前在焊洞洞板的时候，发现精细的电路是很难用洞洞板焊接的，所以就开始在网上找资料学习画PCB电路板，刚开始是找的凡亿教育的视频来看，虽然讲的很好，但是好像不太适合我这种刚入门的小白，在我苦苦盯着视频研究了大半天却一脸懵之后，我最后决定还是自己摸索，不懂的，直接问度娘，不得不说，度娘真的帮了我好多。 然后又花了半天时间发现问题，解决问题，然后就突然什么都明白了，也理解了元件库，封装库，原理图和pcb文件之间的关系，也学会了自己画封装库和元件库，一切好像都是水到渠成。最后就又花了几天的时间绘制并打样了我的第一块电路板（不得不说，嘉立创的五元包邮的板子真的太香了）。 3D模型 用iic接口OLED屏幕测试板子 这个板子很简单，却为小一的诞生奠定了基础。 画了这个小核心板之后，就开始画小一了，因为需要先确定下所使用的芯片，所以在画板子之前，我开始选择所需要的芯片，最后决定主控芯片选择宏晶公司的stc15w408as，因为这个芯片小体积价格便宜却有着强大的功能，而且外围电路也极其简单。 根据Datasheet进行芯片选型 考虑到我想要实现的功能，又选择了Ds1302时钟芯片，LM75a温度测量芯片，微型蜂鸣器，纽扣电池，以及实现程序下载的CH340G芯片。 画了很久才终于画出了pcb电路图，主要是布线和器件布局太麻烦，一动不动画了好几个下午，最后终于成功了，便把pcb文件发给嘉立创，几天后，元件和电路板几乎同时到了，让我很不开心的是，等我收到板子之后，才发现板子有很多的错误，比如开关选择的型号不对；电路板上丝印很不清晰，甚至都重合在一起，无法辨识；有些线还连接有错误，我很是沮丧，最后我只好用来练习焊接贴片元件，物尽其用。 然后就是修改原理图和pcb文件，然后把pcb文件又一次发个嘉立创，又过了几天，板子才到。我迫不及待的开始焊接，好难啊，即使我已经买了936焊台，但是因为我贴片元件焊接的经验实在是太少了，所以还是焊了好长的时间，最后终于焊好了，我在内心祈祷着，很怕电源一接通，就会短路，板子会烧掉。结果还好，电源指示灯成功点亮，然后就开始尝试下载程序，结果却是失败，最后又找了好久才发现问题所在。原因是我没有考虑到单片机下载程序时需要冷启动，最后又飞了好几根线，才终于下载成功。开心爆了！！！ 然后又依次下载了一些测试程序，结果又发现了一些问题，比如走时不太准，纽扣电池掉电太快，又想了好久才解决这些问题。走时不准是因为我的手上有静电，会使走时受到干扰；纽扣电池掉电太快，是因为有一根线连错了，然后又飞了一根线，加了两个电容，然后终于可以了，可以实现所有的功能了。这些事情说着简单，其实真的很难，那些问题都太奇怪了，网上根本找不到资料，都是一点点试出来的，太难了。然后就是漫长的软件开发过程了，这可是比硬件更难的啊。 用飞线下载程序 板子正面 板子背面 软件开发又花了好长的时间，写了好久，然后终于可以写好了，现在当然还是有一些bug，不过都是小问题，大概的已经OK了。程序加起来有好几千行，一个模块是一个C文件和H文件，模块化程序，可以让以后移植程序变得很方便。最后大概实现以下功能： 12345实时时钟（可以实现掉电不掉时）温度测量（分辨率0.125℃，测量范围:-55℃～+125℃）可设置闹钟（也可作为定时器，可设置的时间范 围:1s～24小时，到设定时间有蜂鸣器提醒）秒表（最小精度1ms，可中途暂停，可清零）电压表（范围:0～5V,精确度:10位精度AD转换）（改程序ing，因为有bug） 最后的成品 UI界面显示 基本不可能有其他功能了，因为STC15W408AS只有8kflash,而现在的程序文件已经7.56k了，只能等以后换用更强大的芯片，才能有更多的功能了。演示视频我放在下面了，也算是比较成功吧，我还是超级满意的呀。 因为飞线很不美观，所以我打算升级小一，PCB电路图已经画好了，应该是不会再有前两版的那些错误了，而且加入了新的功能，比如可以用锂电池供电，给锂电池充电等功能。 哈哈，超开心，小一是我真正意义上的第一件作品，希望我以后会有更多的作品，小一会有更多的兄弟姐妹，也会升级小一，给他更强大的大脑，拥有更多的功能。 有兴趣的兄弟姐妹，可以跟我交流，我可以帮你们解决一些我力所能及的问题。","categories":[{"name":"DIY","slug":"DIY","permalink":"https://fan-pengfei.top/categories/DIY/"},{"name":"51单片机","slug":"DIY/51单片机","permalink":"https://fan-pengfei.top/categories/DIY/51%E5%8D%95%E7%89%87%E6%9C%BA/"}],"tags":[{"name":"DIY","slug":"DIY","permalink":"https://fan-pengfei.top/tags/DIY/"},{"name":"51单片机","slug":"51单片机","permalink":"https://fan-pengfei.top/tags/51%E5%8D%95%E7%89%87%E6%9C%BA/"}]}],"categories":[{"name":"Git","slug":"Git","permalink":"https://fan-pengfei.top/categories/Git/"},{"name":"md语法","slug":"md语法","permalink":"https://fan-pengfei.top/categories/md%E8%AF%AD%E6%B3%95/"},{"name":"Windows","slug":"Windows","permalink":"https://fan-pengfei.top/categories/Windows/"},{"name":"DIY","slug":"DIY","permalink":"https://fan-pengfei.top/categories/DIY/"},{"name":"Linux","slug":"Linux","permalink":"https://fan-pengfei.top/categories/Linux/"},{"name":"感悟","slug":"感悟","permalink":"https://fan-pengfei.top/categories/%E6%84%9F%E6%82%9F/"},{"name":"51单片机","slug":"DIY/51单片机","permalink":"https://fan-pengfei.top/categories/DIY/51%E5%8D%95%E7%89%87%E6%9C%BA/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://fan-pengfei.top/tags/Git/"},{"name":"md语法","slug":"md语法","permalink":"https://fan-pengfei.top/tags/md%E8%AF%AD%E6%B3%95/"},{"name":"图床","slug":"图床","permalink":"https://fan-pengfei.top/tags/%E5%9B%BE%E5%BA%8A/"},{"name":"Windows","slug":"Windows","permalink":"https://fan-pengfei.top/tags/Windows/"},{"name":"DIY","slug":"DIY","permalink":"https://fan-pengfei.top/tags/DIY/"},{"name":"兴趣","slug":"兴趣","permalink":"https://fan-pengfei.top/tags/%E5%85%B4%E8%B6%A3/"},{"name":"Linux","slug":"Linux","permalink":"https://fan-pengfei.top/tags/Linux/"},{"name":"感悟","slug":"感悟","permalink":"https://fan-pengfei.top/tags/%E6%84%9F%E6%82%9F/"},{"name":"51单片机","slug":"51单片机","permalink":"https://fan-pengfei.top/tags/51%E5%8D%95%E7%89%87%E6%9C%BA/"}]}